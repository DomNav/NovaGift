// npx prisma generate && npx prisma migrate dev --name init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "sqlite"
  url       = env("DATABASE_URL")
}

enum EnvelopeStatus {
  CREATED
  FUNDED
  OPENED
  CANCELED
}

enum Asset {
  USDC
  XLM
}

enum ProjectKind {
  STANDARD
  QR_EVENT
}

enum ProjectStatus {
  DRAFT
  FUNDED
  ACTIVE
  ENDED
}

enum QrEventType {
  POOL
  ASSIGNED
  CHECKIN
}

enum QrCodeStatus {
  ACTIVE
  USED
  EXPIRED
}

enum WalletType {
  HOT
  HARDWARE
  CONTRACT
}

model Envelope {
  id              String         @id
  status          EnvelopeStatus
  asset           Asset
  decimals        Int
  amount          Decimal
  sender          String
  hash            String
  expiryTs        Int
  message         String?
  fundedTxId      String?
  openedTxId      String?
  canceledTxId    String?
  recipient       String?
  assetDelivered  Asset?
  amountDelivered Decimal?
  createdAt       DateTime       @default(now())
  canceledAt      DateTime?
  fundedAt        DateTime?
  openedAt        DateTime?

  // NEW for Claim API v1
  contractId      String?        @unique
  assetCode       String?
  assetIssuer     String?
  claimedAt       DateTime?
  emailInviteId   String?
  projectId       String?

  @@index([status])
  @@index([sender])
}

model EmailInvite {
  id         String   @id @default(cuid())
  envelopeId String   @unique
  email      String
  inviteJwt  String
  sentAt     DateTime
  acceptedAt DateTime?
}

model Jti {
  jti        String    @id
  envelopeId String
  usedAt     DateTime?
  createdAt  DateTime  @default(now())

  @@index([envelopeId])
}

model Profile {
  wallet             String    @id
  km                 Int       @default(0)
  usdEarned          Decimal   @default(0)
  language           String    @default("en")
  consentGiven       Boolean   @default(false)
  consentTimestamp   DateTime?
  dataRetentionUntil DateTime?
  createdAt          DateTime  @default(now())
}

model SwapReceipt {
  id         String   @id @default(cuid())
  envelopeId String
  route      String
  price      Decimal
  txId       String?
  createdAt  DateTime @default(now())

  @@index([envelopeId])
}

model User {
  id        String     @id @default(cuid())
  publicKey String     @unique
  credits   Int        @default(0)
  skins     UserSkin[]
  wallets   Wallet[]
}

model UserSkin {
  id        String   @id @default(cuid())
  userId    String
  skinId    String
  source    String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, skinId])
}

model Wallet {
  id         String      @id @default(cuid())
  userId     String      @map("user_id")
  user       User        @relation(fields: [userId], references: [id])
  publicKey  String      @unique
  type       WalletType  @default(HOT)
  createdAt  DateTime    @default(now())
}

model Contact {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String
  email       String?  @unique
  wallet      String?  @unique
  tags        Json?    @default("[]")
  lastUsedAt  DateTime?

  @@index([displayName])
  @@index([wallet])
}

model Project {
  id        String        @id @default(cuid())
  kind      ProjectKind   @default(STANDARD)
  name      String
  assetCode String        // USDC/XLM
  budget    Decimal
  status    ProjectStatus @default(DRAFT)
  issueAt   DateTime?
  qrEvent   QrEvent?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([status])
}

model QrEvent {
  id            String      @id @default(cuid())
  projectId     String      @unique
  startAt       DateTime
  endAt         DateTime
  eventType     QrEventType
  poolSize      Int
  amountAtomic  BigInt      // store atomic (7dp)
  generated     Int         @default(0)
  redeemed      Int         @default(0)
  spentAtomic   BigInt      @default(0)
  codes         QrCode[]
  project       Project     @relation(fields: [projectId], references: [id])

  @@index([startAt, endAt])
}

model QrCode {
  id              String       @id @default(cuid())
  eventId         String
  code            String       @unique // short base32 (7â€“9 chars)
  status          QrCodeStatus @default(ACTIVE)
  assignedContact String?      // contacts.id
  claimedAt       DateTime?
  claimTxHash     String?
  expiresAt       DateTime?
  qrEvent         QrEvent      @relation(fields: [eventId], references: [id])

  @@index([eventId, status])
  @@index([assignedContact])
}

model Outbox {
  id          String    @id @default(cuid())
  type        String
  payload     Json
  runAfter    DateTime  @default(now())
  attempts    Int       @default(0)
  lockedBy    String?
  lockedAt    DateTime?
  processedAt DateTime?
  failedAt    DateTime?
  createdAt   DateTime  @default(now())

  @@index([type, runAfter])
}

model FeatureFlag {
  id          String    @id @default(cuid())
  key         String    @unique
  name        String
  description String?
  enabled     Boolean   @default(false)
  rollout     Int       @default(0)    // Percentage rollout (0-100)
  metadata    Json?                    // Additional configuration
  conditions  Json?                    // Targeting rules (e.g., user segments)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  
  @@index([key, enabled])
}

model FeatureFlagLog {
  id         String   @id @default(cuid())
  flagKey    String
  userId     String?
  evaluated  Boolean  // Result of evaluation
  reason     String?  // Why flag was enabled/disabled
  metadata   Json?    // Context data
  createdAt  DateTime @default(now())
  
  @@index([flagKey, createdAt])
  @@index([userId, createdAt])
}
