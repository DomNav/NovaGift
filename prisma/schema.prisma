// npx prisma generate && npx prisma migrate dev --name init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "sqlite"
  url       = env("DATABASE_URL")
}

enum EnvelopeStatus {
  CREATED
  FUNDED
  OPENED
  CANCELED
}

enum Asset {
  USDC
  XLM
}

enum ProjectKind {
  STANDARD
  QR_EVENT
}

enum ProjectStatus {
  DRAFT
  FUNDED
  ACTIVE
  ENDED
}

enum QrEventType {
  POOL
  ASSIGNED
  CHECKIN
}

enum QrCodeStatus {
  ACTIVE
  USED
  EXPIRED
}

model Envelope {
  id              String         @id
  status          EnvelopeStatus
  asset           Asset
  amount          Decimal
  decimals        Int
  sender          String
  hash            String
  expiryTs        Int
  message         String?
  fundedTxId      String?
  openedTxId      String?
  recipient       String?
  assetDelivered  Asset?
  amountDelivered Decimal?
  canceledTxId    String?
  createdAt       DateTime       @default(now())
  fundedAt        DateTime?
  openedAt        DateTime?
  canceledAt      DateTime?

  @@index([sender])
}

model Jti {
  jti        String    @id
  envelopeId String
  usedAt     DateTime?
  createdAt  DateTime  @default(now())

  @@index([envelopeId])
}

model Profile {
  wallet             String    @id
  km                 Int       @default(0)
  usdEarned          Decimal   @default(0)
  language           String    @default("en")
  consentGiven       Boolean   @default(false)
  consentTimestamp   DateTime?
  dataRetentionUntil DateTime?
  createdAt          DateTime  @default(now())
}

model SwapReceipt {
  id         String   @id @default(cuid())
  envelopeId String
  route      String
  price      Decimal
  txId       String?
  createdAt  DateTime @default(now())

  @@index([envelopeId])
}

model User {
  id        String     @id @default(cuid())
  publicKey String     @unique
  credits   Int        @default(0)
  skins     UserSkin[]
}

model UserSkin {
  id        String   @id @default(cuid())
  userId    String
  skinId    String
  source    String
  createdAt DateTime @default(now())
  User      User     @relation(fields: [userId], references: [id])

  @@unique([userId, skinId])
}

model Contact {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  displayName String
  email       String?  @unique
  wallet      String?  @unique
  tags        Json?    @default("[]")
  lastUsedAt  DateTime?

  @@index([displayName])
  @@index([wallet])
}

model Project {
  id        String        @id @default(cuid())
  kind      ProjectKind   @default(STANDARD)
  name      String
  assetCode String        // USDC/XLM
  budget    Decimal
  status    ProjectStatus @default(DRAFT)
  issueAt   DateTime?
  qrEvent   QrEvent?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([status])
}

model QrEvent {
  id            String      @id @default(cuid())
  projectId     String      @unique
  startAt       DateTime
  endAt         DateTime
  eventType     QrEventType
  poolSize      Int
  amountAtomic  BigInt      // store atomic (7dp)
  generated     Int         @default(0)
  redeemed      Int         @default(0)
  spentAtomic   BigInt      @default(0)
  codes         QrCode[]
  project       Project     @relation(fields: [projectId], references: [id])

  @@index([startAt, endAt])
}

model QrCode {
  id              String       @id @default(cuid())
  eventId         String
  code            String       @unique // short base32 (7â€“9 chars)
  status          QrCodeStatus @default(ACTIVE)
  assignedContact String?      // contacts.id
  claimedAt       DateTime?
  claimTxHash     String?
  expiresAt       DateTime?
  qrEvent         QrEvent      @relation(fields: [eventId], references: [id])

  @@index([eventId, status])
  @@index([assignedContact])
}
